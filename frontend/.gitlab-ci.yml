stages:
  - build
#   - test
#   - deploy

image: docker:19.03.12

variables:
  # When you use the dind service, you must instruct Docker to talk with
  # the daemon started inside of the service. The daemon is available
  # with a network connection instead of the default
  # /var/run/docker.sock socket. Docker 19.03 does this automatically
  # by setting the DOCKER_HOST in
  # https://github.com/docker-library/docker/blob/d45051476babc297257df490d22cbd806f1b11e4/19.03/docker-entrypoint.sh#L23-L29
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/services/#accessing-the-services.
  #
  # Specify to Docker where to create the certificates. Docker
  # creates them automatically on boot, and creates
  # `/certs/client` to share between the service and job
  # container, thanks to volume mount from config.toml
  DOCKER_TLS_CERTDIR: "/certs"
  CA_CERTIFICATE: "$CA_CERTIFICATE"
  

services:
- name: docker:19.03.12-dind
  # command: ["--insecure-registry=registry.gitlab.dre.int"]
  command:
  - /bin/sh
  - -c
  - echo "$CA_CERTIFICATE" > /usr/local/share/ca-certificates/my-ca.crt && update-ca-certificates && dockerd-entrypoint.sh || exit

before_script:
  - docker info
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.dre.int

build-job:
  stage: build
  script:
    - export CI_REGISTRY_IMAGE="registry.gitlab.dre.int/web-app/front"
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    # - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest